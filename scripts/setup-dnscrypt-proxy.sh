#!/bin/bash

# DNSCrypt-Proxy Setup Script for Arch Linux
# This script installs and configures dnscrypt-proxy with custom settings

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DNSCRYPT_CONFIG_DIR="/etc/dnscrypt-proxy"
DOTFILES_CONFIG_DIR="$HOME/dotfiles/dnscrypt-proxy"
BACKUP_DIR="/etc/dnscrypt-proxy/backup-$(date +%Y%m%d-%H%M%S)"

# Helper functions
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_error "This script should not be run as root for safety reasons."
        print_status "Please run as a regular user. The script will use sudo when needed."
        exit 1
    fi
}

check_arch() {
    if ! command -v pacman &> /dev/null; then
        print_error "This script is designed for Arch Linux (pacman not found)"
        exit 1
    fi
}

install_dnscrypt_proxy() {
    print_status "Installing dnscrypt-proxy..."
    
    if pacman -Qi dnscrypt-proxy &> /dev/null; then
        print_success "dnscrypt-proxy is already installed"
    else
        sudo pacman -S --noconfirm dnscrypt-proxy
        print_success "dnscrypt-proxy installed successfully"
    fi
}

backup_existing_config() {
    if [[ -d "$DNSCRYPT_CONFIG_DIR" ]]; then
        print_status "Backing up existing configuration to $BACKUP_DIR"
        sudo mkdir -p "$BACKUP_DIR"
        sudo cp -r "$DNSCRYPT_CONFIG_DIR"/* "$BACKUP_DIR"/ 2>/dev/null || true
        print_success "Backup completed"
    fi
}

copy_configuration() {
    print_status "Copying custom configuration files..."
    
    # Ensure config directory exists
    sudo mkdir -p "$DNSCRYPT_CONFIG_DIR"
    
    # Copy all configuration files from dotfiles
    if [[ -d "$DOTFILES_CONFIG_DIR" ]]; then
        sudo cp "$DOTFILES_CONFIG_DIR"/* "$DNSCRYPT_CONFIG_DIR"/
        sudo chown root:root "$DNSCRYPT_CONFIG_DIR"/*
        sudo chmod 644 "$DNSCRYPT_CONFIG_DIR"/*
        print_success "Configuration files copied successfully"
    else
        print_error "Configuration directory not found: $DOTFILES_CONFIG_DIR"
        exit 1
    fi
}

configure_systemd_resolved() {
    print_status "Configuring systemd-resolved..."
    
    # Check if systemd-resolved is running
    if systemctl is-active --quiet systemd-resolved; then
        print_status "Stopping and disabling systemd-resolved..."
        sudo systemctl stop systemd-resolved
        sudo systemctl disable systemd-resolved
        print_success "systemd-resolved disabled"
    else
        print_status "systemd-resolved is not running"
    fi
    
    # Backup and modify resolv.conf
    if [[ -L /etc/resolv.conf ]]; then
        print_status "Removing systemd-resolved symlink for resolv.conf"
        sudo rm /etc/resolv.conf
    elif [[ -f /etc/resolv.conf ]]; then
        print_status "Backing up existing resolv.conf"
        sudo cp /etc/resolv.conf /etc/resolv.conf.backup
    fi
    
    # Create new resolv.conf pointing to dnscrypt-proxy
    print_status "Creating new resolv.conf..."
    sudo tee /etc/resolv.conf > /dev/null << EOF
# Generated by dnscrypt-proxy setup script
nameserver 127.0.2.1
nameserver ::1
EOF
    
    # Make resolv.conf immutable to prevent other services from modifying it
    sudo chattr +i /etc/resolv.conf
    print_success "resolv.conf configured and protected"
}

enable_dnscrypt_service() {
    print_status "Enabling and starting dnscrypt-proxy service..."
    
    # Enable and start the service
    sudo systemctl enable dnscrypt-proxy.service
    sudo systemctl start dnscrypt-proxy.service
    
    # Wait a moment for the service to start
    sleep 2
    
    # Check service status
    if systemctl is-active --quiet dnscrypt-proxy; then
        print_success "dnscrypt-proxy service is running"
    else
        print_error "Failed to start dnscrypt-proxy service"
        print_status "Checking service status..."
        sudo systemctl status dnscrypt-proxy.service
        exit 1
    fi
}

test_dns_resolution() {
    print_status "Testing DNS resolution..."
    
    # Test with dig if available
    if command -v dig &> /dev/null; then
        print_status "Testing with dig..."
        if dig @127.0.2.1 google.com +short > /dev/null; then
            print_success "DNS resolution working with dnscrypt-proxy"
        else
            print_warning "DNS test with dig failed"
        fi
    fi
    
    # Test with nslookup
    if command -v nslookup &> /dev/null; then
        print_status "Testing with nslookup..."
        if nslookup google.com 127.0.2.1 > /dev/null 2>&1; then
            print_success "DNS resolution working with nslookup"
        else
            print_warning "DNS test with nslookup failed"
        fi
    fi
    
    # Basic connectivity test
    print_status "Testing internet connectivity..."
    if ping -c 1 google.com > /dev/null 2>&1; then
        print_success "Internet connectivity test passed"
    else
        print_warning "Internet connectivity test failed"
    fi
}

show_status() {
    print_status "DNSCrypt-Proxy Status:"
    echo "=========================="
    
    # Service status
    echo -n "Service Status: "
    if systemctl is-active --quiet dnscrypt-proxy; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
    fi
    
    # Listening status
    echo -n "Listening on: "
    if ss -tuln | grep -q ":53 "; then
        echo -e "${GREEN}Port 53${NC}"
    else
        echo -e "${RED}Not listening on port 53${NC}"
    fi
    
    # Configuration file
    echo -n "Config file: "
    if [[ -f "$DNSCRYPT_CONFIG_DIR/dnscrypt-proxy.toml" ]]; then
        echo -e "${GREEN}Present${NC}"
    else
        echo -e "${RED}Missing${NC}"
    fi
    
    echo "=========================="
}

uninstall_dnscrypt() {
    print_warning "Uninstalling dnscrypt-proxy..."
    
    # Stop and disable service
    sudo systemctl stop dnscrypt-proxy.service 2>/dev/null || true
    sudo systemctl disable dnscrypt-proxy.service 2>/dev/null || true
    
    # Remove package
    sudo pacman -Rns --noconfirm dnscrypt-proxy 2>/dev/null || true
    
    # Restore resolv.conf
    sudo chattr -i /etc/resolv.conf 2>/dev/null || true
    if [[ -f /etc/resolv.conf.backup ]]; then
        sudo cp /etc/resolv.conf.backup /etc/resolv.conf
    else
        sudo rm -f /etc/resolv.conf
        sudo systemctl enable systemd-resolved
        sudo systemctl start systemd-resolved
    fi
    
    print_success "dnscrypt-proxy uninstalled"
}

show_help() {
    echo "DNSCrypt-Proxy Setup Script for Arch Linux"
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Options:"
    echo "  install     Install and configure dnscrypt-proxy (default)"
    echo "  status      Show current status"
    echo "  restart     Restart dnscrypt-proxy service"
    echo "  uninstall   Remove dnscrypt-proxy and restore system DNS"
    echo "  help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0              # Install and configure"
    echo "  $0 install      # Install and configure"
    echo "  $0 status       # Show status"
    echo "  $0 restart      # Restart service"
    echo "  $0 uninstall    # Remove installation"
}

main() {
    local action="${1:-install}"
    
    case "$action" in
        "install")
            print_status "Starting dnscrypt-proxy setup for Arch Linux..."
            check_root
            check_arch
            install_dnscrypt_proxy
            backup_existing_config
            copy_configuration
            configure_systemd_resolved
            enable_dnscrypt_service
            test_dns_resolution
            show_status
            print_success "dnscrypt-proxy setup completed!"
            print_status "You may need to restart your browser or clear DNS cache"
            ;;
        "status")
            show_status
            ;;
        "restart")
            print_status "Restarting dnscrypt-proxy service..."
            sudo systemctl restart dnscrypt-proxy.service
            sleep 2
            show_status
            ;;
        "uninstall")
            uninstall_dnscrypt
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Unknown option: $action"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
